@model DataBaseLibrary.Gen_Categories

@{
    ViewBag.Title = "Categories";
}
<div class="container my-0" style="width:900px">
    @using (Html.BeginForm("SaveCategories", "Gen_Categories", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @*<h4>@(Model.Id > 0 ? "Edit Service" : "Add New Service")</h4>
                <hr />*@ 
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            <div class="row g-3">
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, "Brand_Name", htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                @*<div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                <div class="col-md-2">
                    <label for="Measure" class="form-label">Measure</label>
                    <select id="Measure" name="MeasureType" class="form-control form-control-sm">
                        <option  style="background-color:black;color:white"
                                @(Model.MeasureType == null ? "selected" : "")>
                            Not Set
                        </option>
                        <option value="Quantity" @(Model.MeasureType == "Quantity" ? "selected" : "")>Quantity</option>
                        <option value="Length" @(Model.MeasureType == "Length" ? "selected" : "")>Length</option>
                        <option value="Weight" @(Model.MeasureType == "Weight" ? "selected" : "")>Weight</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="ValueInput" class="form-label">Value:</label>
                    <div class="input-group input-group-sm">
                        <input type="number" id="ValueInput" name="MeasureValue" style="width:50px"
                               class="form-control form-control-sm"
                               value="@Model.MeasureValue" />
                        <span class="input-group-text" id="UnitLabel" style="height:32px;">
                             @(Model.MeasureType ?? "Unit")
                        </span>
                    </div>
                </div>
                <!-- Hidden fields -->
                <input type="hidden" name="Quantity" id="Quantity" />
                <input type="hidden" name="Length" id="Length" />
                <input type="hidden" name="Weight" id="Weight" />
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BranchId, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.BranchId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.RecordTimeStamp, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.RecordTimeStamp, new { htmlAttributes = new { @class = "form-control"} })
                        @Html.ValidationMessageFor(model => model.RecordTimeStamp, "31/01/2025 12:00 am", new { @class = "text-danger",style="font-size:12px" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Category_Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.EditorFor(model => model.Category_Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Category_Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                @*<div class="col-md-2">
                        <div class="form-group">
                            <div class="checkbox">
                                @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.Active, new { htmlAttributes = new { style = "width:100px; height: 31px;" } })
                                @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="checkbox">
                                @Html.LabelFor(model => model.Deleted, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.Deleted, new { htmlAttributes = new { style = "width:100px;height: 31px;" } })
                                @Html.ValidationMessageFor(model => model.Deleted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>*@
            </div>
        </div>
        <div class="form-group mt-3">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@(Model.Id > 0 ? "Update" : "Create")" class="btn btn-primary"style="font-weight:600;" />
                @if (Model.Id > 0)
                {
                    @Html.ActionLink("Cancel", "Categories", null, new { @class = "btn btn-secondary" })
                }
                else
                {
                    <input type="reset" value="Clear" class="btn btn-dark"style="font-weight:600;" />
                }
            </div>
        </div>
    }
    <div class="table-responsive mt-3">
        <table class="table table-bordered text-center">
            <thead class="table-light">
                <tr>
                    <th>Brand_Name</th>
                    <th>Code</th>
                    <th>Description</th>
                    <th>MeasureType</th>
                    <th>MeasureValue</th>
                    <th>Price</th>
                    <th>BranchId</th>
                    <th>RecordTimeStamp</th>
                    <th>Tax</th>
                    <th>Category_Name</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.CatagoriesList != null && ((IEnumerable<DataBaseLibrary.Gen_Categories>)ViewBag.CatagoriesList).Any())
                {
                    foreach (var item in (IEnumerable<DataBaseLibrary.Gen_Categories>)ViewBag.CatagoriesList)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Code</td>
                            <td>@item.Description</td>
                            <td>@item.MeasureType</td>
                            <td>@item.MeasureValue</td>
                            <td>@item.Price</td>
                            <td>@item.BranchId</td>
                            <td>@item.RecordTimeStamp</td>
                            <td>@item.Tax</td>
                            <td>@item.Category_Name</td>
                            <td class="d-flex align-items-center" style="grid-gap:4px">
                                @Html.ActionLink(" ", "Edit", new { id = item.Id }, new { @class = "btn btn-sm btn-outline-success me-2 shadow-sm fa fa-edit", title = "Edit" })
                                @using (Html.BeginForm("DeleteCategory", "Gen_Categories", FormMethod.Post, new { onsubmit = "return confirm('Are you sure you want to delete ?');", style = "display:inline" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.Hidden("id", item.Id)
                                    <button type="submit" class="btn btn-sm btn-outline-danger shadow-sm" title="Delete">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="11" class="text-muted">No Categories found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-table2excel/1.1.1/jquery.table2excel.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function () {
        $(() => {
            const updateHidden = () => {
                const m = $('#Measure').val(), v = $('#ValueInput').val();
                $('#UnitLabel').text({ Quantity: 'Qty', Length: 'm', Weight: 'g' }[m] || 'Unit');
                $('#Quantity, #Length, #Weight').val('');
                if (m) $('#' + m).val(v);
            };
            $('#Measure, #ValueInput').on('change input', updateHidden);
        });
    });
</script>