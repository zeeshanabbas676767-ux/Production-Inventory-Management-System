@model DataBaseLibrary.Gen_Stock

@{
    ViewBag.Title = "Stock";
}
<div class="container my-0" style="width:900px">
    @using (Html.BeginForm("SaveStock", "Gen_Stocks", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @*<h4>@(Model.Id > 0 ? "Edit Service" : "Add New Service")</h4>
                <hr />*@
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            <div class="row g-3">
                <div id="BeforeFields">
                    <div class="row g-2 mb-2">
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.BrandName, "Brand_Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.BrandName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.BrandName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProductName, "Select_Products", htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.DropDownList("ProductName", null, " ", htmlAttributes: new { @class = "form-control" })
                                @*@Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })*@
                                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.VendorName, "Vendor_Name", htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.VendorName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.VendorName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @*<div class="col-md-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.InStock, "In_Stock", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="dropdown">
                        @Html.DropDownListFor(model => model.InStock, new SelectList(new List<SelectListItem>
                        {
                            new SelectListItem { Text = "Yes", Value = "true" },
                            new SelectListItem { Text = "No", Value = "false" }
                        }, "Value", "Text"), " ", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.InStock, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.BillNumber, "Bill_Number", htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.BillNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.BillNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.GatePass, "Gate_Pass", htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.GatePass, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.GatePass, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.StockStatus, "Stock_Status", htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.StockStatus, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.StockStatus, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <button class="btn btn-primary" style="width:80px;height:35px;" id="Continue"><strong>Next </strong><i class="fa fa-long-arrow-right"></i></button>
                    </div>
                </div>
                <div id="hiddenFields" style="display:none">
                    <div class="row g-2 mb-2">
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Condition, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.Condition, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Condition, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Identity, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.Identity, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Identity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.StockDescription, "Stock_Description", htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.StockDescription, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.StockDescription, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.LabelFor(model => model.RecordTimeStamp, "RecordTimeStamp", htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.RecordTimeStamp, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.RecordTimeStamp, "", new { @class = "text-danger"})
                            </div>
                        </div>
                        <button id="BackBtn" class="btn btn-primary" style="width:80px;height:35px;"><i class="fa fa-long-arrow-left"></i><strong> Back</strong></button>
                    </div>
                </div>
                    @*<div class="col-md-2">
            <div class="form-group">
                @Html.LabelFor(model => model.InStock, "In_Stock", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="checkbox mt-1" style="transform: scale(1.5); margin-left: 33px;">
                    @Html.EditorFor(model => model.InStock)
                    @Html.ValidationMessageFor(model => model.InStock, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="checkbox">
                    @Html.EditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                @Html.LabelFor(model => model.Deleted, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="checkbox">
                    @Html.EditorFor(model => model.Deleted)
                    @Html.ValidationMessageFor(model => model.Deleted, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@
                    <div class="col-md-6" style="margin-left:460px;margin-top:-30px;width: 350px;height:100px">
                        <div class="card-body p-0" style="max-height: 117px; overflow-y: auto;">
                            <table class="table table-bordered table-sm mb-0" id="miniTable"
                                   style="background-color: black; color: white; width: 100%; border-radius: 10px; font-size: 0.75rem;">
                                <thead class="table-dark">
                                    <tr>
                                        <th style="width: 60px;">Brand</th>
                                        <th style="width: 60px;">Vendor</th>
                                        <th style="width: 60px;">Status</th>
                                        <th style="width: 40px;">Qty</th>
                                        <th style="width: 60px;">Price</th>
                                        <th style="width: 60px;">Action</th>
                                    </tr>
                                </thead>

                                <tbody></tbody>
                                <tfoot>
                                    <tr class="table-light text-black fw-bold">
                                        <td colspan="2" class="text-end" style="color:black;font-size:14px">Total Qty:</td>
                                        <td id="totalQty" style="color: black; font-size: 14px">0</td>
                                        <td colspan="2" class="text-end" style="color: black; font-size: 14px">Total Price:</td>
                                        <td id="totalPrice" style="color: black; font-size: 14px">0</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
                <div class="form-group mt-3">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="@(Model.Id > 0 ? "Update" : "Create")" class="btn btn-primary"style="font-weight:600;" />
                        @if (Model.Id > 0)
                        {
                            @Html.ActionLink("Cancel", "Stock", null, new { @class = "btn btn-secondary" })
                        }
                        else
                        {
                            <input type="reset" value="Clear" class="btn btn-dark" style="font-weight:600;"/>
                        }
                        <button type="button" class="btn btn-primary" id="addBtn" onclick="addToMiniTable()"><i class="fa fa-plus-circle"></i><strong> Add</strong></button>
                    </div>
                </div>
                }
                <div class="table-responsive mt-3">
                    <table class="table table-bordered text-center">
                        <thead class="table-light">
                            <tr>
                                <th>Vendor_Name</th>
                                <th>Product_Name</th>
                                <th>Stock_Description</th>
                                <th>Total_Price</th>
                                <th>Bill_Number</th>
                                <th>Gate_Pass</th>
                                <th>Stock_Status</th>
                                <th>Condition</th>
                                <th>Identity</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>RecordTimeStamp</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ViewBag.StockList != null && ((IEnumerable<DataBaseLibrary.Gen_Stock>)ViewBag.StockList).Any())
                            {
                                foreach (var item in (IEnumerable<DataBaseLibrary.Gen_Stock>)ViewBag.StockList)
                                {
                                    <tr>
                                        <td>@item.VendorName</td>
                                        <td>@item.ProductName</td>
                                        <td>@item.StockDescription</td>
                                        <td>@(item.Price * item.Quantity)</td>
                                        <td>@item.BillNumber</td>
                                        <td>@item.GatePass</td>
                                        <td>@item.StockStatus</td>
                                        <td>@item.Condition</td>
                                        <td>@item.Identity</td>
                                        <td>@item.Price</td>
                                        <td>@item.Quantity</td>
                                        <td>@item.RecordTimeStamp</td>
                                        <td class="d-flex align-items-center" style="grid-gap:4px">
                                            @Html.ActionLink(" ", "Edit", new { id = item.Id }, new { @class = "btn btn-sm btn-outline-success me-2 shadow-sm fa fa-edit", title = "Edit" })
                                            @using (Html.BeginForm("DeleteStock", "Gen_Stocks", FormMethod.Post, new { onsubmit = "return confirm('Are you sure you want to delete ?');", style = "display:inline" }))
                                            {
                                                @Html.AntiForgeryToken()
                                                @Html.Hidden("id", item.Id)
                                                <button type="submit" class="btn btn-sm btn-outline-danger shadow-sm" title="Delete">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="13" class="text-muted">No Stocks found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-table2excel/1.1.1/jquery.table2excel.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize animations
            animateElements();

            // Set up event handlers
            setupEventHandlers();
        });
        function animateElements() {
            // Animate heading letters
            $('.animated-heading span').each(function (i) {
                $(this).css({
                    'animation-delay': (i * 0.2) + 's',
                    'opacity': 0
                });
            });

            // Animate form boxes
            $('.animated-box').each(function (i) {
                $(this).css({
                    'animation-delay': (i * 0.1 + 1) + 's',
                    'opacity': 0
                });
            });
        }

        function setupEventHandlers() {
            // Continue button shows hidden fields
            $('#Continue').click(function (e) {
                e.preventDefault();
                validateAndContinue();
            });

            // Back button returns to first form section
            $('#BackBtn').click(function (e) {
                e.preventDefault();
                $('#hiddenFields').hide();
                $('#BeforeFields').show();
                $('#Continue').show();
            });

            // Reset form buttons
            $('#resetBtn, #resetBtn2').click(function () {
                clearForm();
            });

            // Form submission handler
            $('#stockForm').submit(function (e) {
                e.preventDefault();
                submitStockForm();
            });
        }

        var stagedEntries = [];

        function validateAndContinue() {
            let isValid = true;
            let requiredFields = [
                '#BrandName',
                '#VendorName',
                '#ProductName',
                '#StockStatus'
            ];

            requiredFields.forEach(function (selector) {
                if ($(selector).val().trim() === '') {
                    isValid = false;
                    $(selector).addClass('is-invalid');
                } else {
                    $(selector).removeClass('is-invalid');
                }
            });

            if (isValid) {
                $('#hiddenFields').show();
                $('#Continue').hide();
                $('#BeforeFields').hide();
            } else {
                $('#hiddenFields').show();
                $('#BeforeFields').hide();
            }
        }

        function addToMiniTable() {
            // Validate hidden fields
            let isValid = true;
            let requiredFields = [
                '#Quantity',
                '#Price',
                '#BillNumber'
            ];

            requiredFields.forEach(function (selector) {
                if ($(selector).val().trim() === '') {
                    isValid = false;
                    $(selector).addClass('is-invalid');
                } else {
                    $(selector).removeClass('is-invalid');
                }
            });

            if (!isValid) {
                alert("Please fill all required fields.");
                return;
            }

            const entry = {
                BrandName: $('#BrandName').val(),
                VendorName: $('#VendorName').val(),
                ProductName: $('#ProductName').val(),
                StockStatus: $('#StockStatus').val(),
                MeasureValue: $('#MeasureValue').val(),
                Quantity: parseFloat($('#Quantity').val()),
                Price: parseFloat($('#Price').val()),
                BillNumber: $('#BillNumber').val(),
                GatePass: $('#GatePass').val(),
                StockDescription: $('#StockDescription').val()
            };

            stagedEntries.push(entry);
            updateMiniTable();
            $('#StagedEntriesJson').val(JSON.stringify(stagedEntries));

        }

        function removeEntry(index) {
            stagedEntries.splice(index, 1);
            updateMiniTable();
            $('#StagedEntriesJson').val(JSON.stringify(stagedEntries));
        }

        function updateMiniTable() {
            const tbody = $('#miniTable tbody');
            tbody.empty();

            let totalQty = 0;
            let totalPrice = 0;

            stagedEntries.forEach((entry, index) => {
                totalQty += entry.Quantity;
                totalPrice += entry.Price * entry.Quantity;

                tbody.append(`
                        <tr>
                            <td>${entry.BrandName}</td>
                            <td>${entry.VendorName}</td>
                            <td>${entry.StockStatus}</td>
                            <td>${entry.Quantity}</td>
                            <td>${entry.Price.toFixed(2)}</td>
                            <td>
                                <button class='btn btn-sm btn-danger' onclick='removeEntry(${index})'>
                                    <i class='fa fa-trash'></i> Remove
                                </button>
                            </td>
                        </tr>
                    `);
            });

            // Update footer
            $('#miniTable tfoot').html(`
                    <tr class="table-light text-black fw-bold">
                        <td colspan="2" class="text-end" style="color:black;font-size:14px">Total Quantity:</td>
                        <td  style="color: black; font-size: 14px">${totalQty}</td>
                         <td colspan="2" class="text-end"  style="color: black; font-size: 14px">Total Price:</td>
                        <td  style="color: black; font-size: 14px">${totalPrice.toFixed(2)}</td>
                    </tr>
                `);
        }


        function submitStockForm() {
            // If we have staged entries, submit them
            if (stagedEntries.length > 0) {
                $('#stockForm').off('submit').submit();
                return;
            }

            // Otherwise validate the single entry form
            let isValid = true;
            let requiredFields = [
                '#BrandName',
                '#VendorName',
                '#StockStatus',
                '#Quantity',
                '#Price'
            ];

            requiredFields.forEach(function (selector) {
                if ($(selector).val().trim() === '') {
                    isValid = false;
                    $(selector).addClass('is-invalid');
                } else {
                    $(selector).removeClass('is-invalid');
                }
            });

            if (!isValid) {
                alert("Please fill all required fields.");
                return;
            }

            $('#stockForm').off('submit').submit();
        }
    </script>
}